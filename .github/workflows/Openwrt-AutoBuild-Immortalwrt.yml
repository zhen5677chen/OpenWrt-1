#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Openwrt-AutoBuild-Immortalwrt

on: 
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - main
    paths:
      - '.github/workflows/Openwrt-AutoBuild-Immortalwrt.yml'
  schedule:
    - cron: 18 18 * * *

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PPPOE_USERNAME: ${{ secrets.PPPOE_USERNAME }}
  PPPOE_PASSWD: ${{ secrets.PPPOE_PASSWD }}
  SCKEY: ${{ secrets.SCKEY }}
  PAT: ${{ secrets.PAT }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: Ubuntu-20.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
  
    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/Immortalwrt/common/settings.ini"
        if [ -f "Immortalwrt/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/Immortalwrt/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "ADD_SH=${ADD_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_IPK_FOR_ARTIFACT=${UPLOAD_IPK_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
    
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig rename
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        
        df -h
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV
    
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
    
    - name: Load && Update feeds
      run: |
        cp -rf Immortalwrt/common/files/. openwrt/
        cd openwrt
        ./scripts/feeds update -a
    
    - name: Load custom configuration
      run: |
        cp -rf Immortalwrt openwrt/
        cd openwrt
        chmod +x Immortalwrt/common/$ADD_SH
        /bin/bash "Immortalwrt/common/$ADD_SH"
        if [ -f "Immortalwrt/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x Immortalwrt/${{matrix.target}}/$DIY_SH
          /bin/bash "Immortalwrt/${{matrix.target}}/$DIY_SH"
        fi
        mv Immortalwrt/common/$CONFIG_FILE .config
        if [ -f "Immortalwrt/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat Immortalwrt/${{matrix.target}}/$CONFIG_FILE >> .config
        fi
    
    - name: Apply patches
      run: |
        cd openwrt
        find "Immortalwrt/common/patches" -type f ! -path 'Immortalwrt/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "Immortalwrt/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "Immortalwrt/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi
              
    - name: SSH connection to Actions
      uses: garypang13/debugger-action@master
      if: contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
      
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        mkdir ipk-package && find openwrt/bin/packages/*/*/ -maxdepth 1 \
        -name "*ddns*.ipk" \
        -or -name "*adguardhome*.ipk" \
        -or -name "*AdGuard*.ipk" \
        -or -name "*smartdns*.ipk" \
        -or -name "*kodexplorer*.ipk" \
        -or -name "*passwall*.ipk" \
        -or -name "*tcpdump*.ipk" \
        -or -name "*koolproxyR*.ipk" \
        -or -name "*socat*.ipk" \
        -or -name "*watchcat*.ipk" \
        -or -name "*dnsfilter*.ipk" \
        -or -name "*theme*.ipk" \
        -or -name "*openclash*.ipk" \
        -or -name "*netdata*.ipk" \
        -or -name "*wizard*.ipk" \
        -or -name "*aliyundrive*.ipk" \
        | xargs -i mv -f {} ./ipk-package/
        cd ipk-package
        echo "IPK-PACKAGE=$PWD" >> $GITHUB_ENV
        
        cd ..
        mkdir vssr-ssr-bypass && find openwrt/bin/packages/*/*/ -maxdepth 1 \
        -name "*pdnsd-alt*.ipk" \
        -or -name "*luasocket*.ipk" \
        -or -name "*cjson*.ipk" \
        -or -name "*shadowsocksr-libev*.ipk" \
        -or -name "*trojan*.ipk" \
        -or -name "*xray-plugin*.ipk" \
        -or -name "*hysteria*.ipk" \
        -or -name "*neturl*.ipk" \
        -or -name "*chinadns-ng*.ipk" \
        -or -name "*luci-lib-ipkg" \
        -or -name "*maxminddb*.ipk" \
        -or -name "*vssr*.ipk" \
        -or -name "*ssr-plus*.ipk" \
        -or -name "*bypass*.ipk" \
        | xargs -i mv -f {} ./vssr-ssr-bypass/
        cd vssr-ssr-bypass
        echo "Dependency=$PWD" >> $GITHUB_ENV
        
        cd ..
        mkdir firmware && find openwrt/bin/targets/*/*/ -maxdepth 1 \
        -name "*combined*" \
        -or -name "*sysupgrade*" \
        -or -name "*armvirt-64-default-rootfs*" \
        -or -name "sha256sums" \
        | xargs -i mv -f {} ./firmware/
        cp openwrt/.config  ./firmware/${{matrix.target}}.config
        cd firmware
        echo ${{ env.date4 }} > version.txt
        mv sha256sums ${{matrix.target}}_sha256sums
        rename -v "s/^openwrt/${{ env.date3 }}-openwrt/" *
        rename -v "s/xiaomi_redmi-router/redmi/" *bin
        rename -v "s/-d-team//" *bin
        rename -v "s/friendlyarm_nanopi-r2s/nanopi-r2s/" *gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        RANDOM=$$$(date +%s)
        rand=$[$RANDOM % ${#Emoji[@]}]
        echo "EMOJI=${Emoji[$rand]}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "phicomm-k2p" ]; then
        echo "NOTICE=刷机时breed里的闪存布局请选择斐讯而非默认的公版" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "x86_64" ]; then
        echo "NOTICE=请分配不少于800M的存储容量" >> $GITHUB_ENV
        fi
 
    - name: Upload firmware to cowtransfer
      if: env.UPLOAD_FIRMWARE_TO_COWTRANSFER == 'true'
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        cowurl=$(./transfer cow --block 2621440 -s --no-progress ${FIRMWARE})
        cowurl=$(echo $cowurl | grep -o -E "https[^ ]*")
        echo "COWURL=$cowurl" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $cowurl ${{ env.EMOJI }} 🚀"
 
    - name: Upload firmware to WeTransfer
      if: env.UPLOAD_FIRMWARE_TO_WETRANSFER == 'true' && ! contains(github.event.action, 'noup')
      continue-on-error: true
      run: |
        curl -fsSL git.io/file-transfer | sh
        wetrans=$(./transfer wet -s -p 16 --no-progress ${FIRMWARE})
        wetrans=$(echo $wetrans | grep -o -E "https[^ ]*")
        echo "WETRANS=$wetrans" >> $GITHUB_ENV
        echo "Download Link: ${{ env.EMOJI }} $wetrans ${{ env.EMOJI }} 🚀"
    
    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "墙内加速下载 🚀:\n" >> release.txt
        echo -e "[腾讯云] (https://op.supes.top/firmware/${{matrix.target}}/ ☁)\n" >> release.txt
        [ ${{ env.WETRANS }} ] && echo -e "[WeTransfer] (${{ env.WETRANS }} 🗽)\n" >> release.txt
        [ ${{ env.COWURL }} ] && echo -e "[奶牛上传] (${{ env.COWURL }} 🐮)\n" >> release.txt
        [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true
    
    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}
        path: |
          ${{ env.FIRMWARE }}/*squashfs*
          !${{ env.FIRMWARE }}/*efi*
          !${{ env.FIRMWARE }}/*rootfs*
    
    - name: Upload EFI firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}_EFI
        path: ${{ env.FIRMWARE }}/*efi*
        
    - name: Upload ISO firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}_ISO
        path: ${{ env.FIRMWARE }}/*.iso
    
    - name: Upload ipk-package for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_IPK_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}} IPK
        path: |
          ${{ env.IPK-PACKAGE }}/
    
    - name: Upload ipk-package for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_IPK_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}} vssr-bypass-ssr
        path: |
          ${{ env.Dependency }}/
    
    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt_${{ env.date3 }}_${{matrix.target}}_Immortalwrt编译完成
    
    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=OpenWrt_${{ env.date3 }}_${{matrix.target}}_Immortalwrt编译完成😋  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
    
    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.PAT }}
        retain_days: 15
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
